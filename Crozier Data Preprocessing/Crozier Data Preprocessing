{"cells":[{"cell_type":"markdown","metadata":{"id":"J6DDDfaLhSDD"},"source":["#Crozier data preprocessing\n","Goal: Develop a systematic method to extract labelled images from raw video mp4 file. This process will be applied on top of the sewer deficiency classifier. Extracted images can then be analyzed for the deficiency report.\n","\n","Comparison between the following methods\n","1. Easy OCR\n","2. Keras OCR\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9946,"status":"ok","timestamp":1731092358322,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"},"user_tz":300},"id":"NyLiTz30hJse","outputId":"3cafdd26-a9ba-4a19-d511-1e25d1ba7733"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: easyocr in /usr/local/lib/python3.10/dist-packages (1.7.2)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from easyocr) (2.5.0+cu121)\n","Requirement already satisfied: torchvision>=0.5 in /usr/local/lib/python3.10/dist-packages (from easyocr) (0.20.0+cu121)\n","Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.10/dist-packages (from easyocr) (4.10.0.84)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from easyocr) (1.13.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from easyocr) (1.26.4)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from easyocr) (10.4.0)\n","Requirement already satisfied: scikit-image in /usr/local/lib/python3.10/dist-packages (from easyocr) (0.24.0)\n","Requirement already satisfied: python-bidi in /usr/local/lib/python3.10/dist-packages (from easyocr) (0.6.3)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from easyocr) (6.0.2)\n","Requirement already satisfied: Shapely in /usr/local/lib/python3.10/dist-packages (from easyocr) (2.0.6)\n","Requirement already satisfied: pyclipper in /usr/local/lib/python3.10/dist-packages (from easyocr) (1.3.0.post6)\n","Requirement already satisfied: ninja in /usr/local/lib/python3.10/dist-packages (from easyocr) (1.11.1.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (3.16.1)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (4.12.2)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (2024.10.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.10/dist-packages (from torch->easyocr) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy==1.13.1->torch->easyocr) (1.3.0)\n","Requirement already satisfied: imageio>=2.33 in /usr/local/lib/python3.10/dist-packages (from scikit-image->easyocr) (2.36.0)\n","Requirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.10/dist-packages (from scikit-image->easyocr) (2024.9.20)\n","Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.10/dist-packages (from scikit-image->easyocr) (24.1)\n","Requirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.10/dist-packages (from scikit-image->easyocr) (0.4)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->easyocr) (3.0.2)\n","Requirement already satisfied: keras-ocr in /usr/local/lib/python3.10/dist-packages (0.9.3)\n","Requirement already satisfied: editdistance in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (0.8.1)\n","Requirement already satisfied: efficientnet==1.0.0 in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (1.0.0)\n","Requirement already satisfied: essential_generators in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (1.0)\n","Requirement already satisfied: fonttools in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (4.54.1)\n","Requirement already satisfied: imgaug in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (0.4.0)\n","Requirement already satisfied: pyclipper in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (1.3.0.post6)\n","Requirement already satisfied: shapely in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (2.0.6)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (4.66.6)\n","Requirement already satisfied: validators in /usr/local/lib/python3.10/dist-packages (from keras-ocr) (0.34.0)\n","Requirement already satisfied: keras-applications<=1.0.8,>=1.0.7 in /usr/local/lib/python3.10/dist-packages (from efficientnet==1.0.0->keras-ocr) (1.0.8)\n","Requirement already satisfied: scikit-image in /usr/local/lib/python3.10/dist-packages (from efficientnet==1.0.0->keras-ocr) (0.24.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (1.16.0)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (1.26.4)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (1.13.1)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (10.4.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (3.8.0)\n","Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (4.10.0.84)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.10/dist-packages (from imgaug->keras-ocr) (2.36.0)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (from keras-applications<=1.0.8,>=1.0.7->efficientnet==1.0.0->keras-ocr) (3.12.1)\n","Requirement already satisfied: networkx>=2.8 in /usr/local/lib/python3.10/dist-packages (from scikit-image->efficientnet==1.0.0->keras-ocr) (3.4.2)\n","Requirement already satisfied: tifffile>=2022.8.12 in /usr/local/lib/python3.10/dist-packages (from scikit-image->efficientnet==1.0.0->keras-ocr) (2024.9.20)\n","Requirement already satisfied: packaging>=21 in /usr/local/lib/python3.10/dist-packages (from scikit-image->efficientnet==1.0.0->keras-ocr) (24.1)\n","Requirement already satisfied: lazy-loader>=0.4 in /usr/local/lib/python3.10/dist-packages (from scikit-image->efficientnet==1.0.0->keras-ocr) (0.4)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->imgaug->keras-ocr) (1.3.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->imgaug->keras-ocr) (0.12.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->imgaug->keras-ocr) (1.4.7)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->imgaug->keras-ocr) (3.2.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->imgaug->keras-ocr) (2.8.2)\n"]}],"source":["# Using easyocr for character recognition\n","!pip install easyocr\n","# keras-ocr for character recognition\n","!pip install keras-ocr"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"hL2rZk6fgqcL","executionInfo":{"status":"ok","timestamp":1731092541647,"user_tz":300,"elapsed":170,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"}}},"outputs":[],"source":["# Video Analysis\n","import cv2\n","import easyocr\n","import numpy as np\n","import pandas as pd\n","from tqdm.notebook import tqdm\n","from time import perf_counter\n","import os\n","import matplotlib.pyplot as plt\n","\n","# To avoid colab crashes when showing images\n","from google.colab.patches import cv2_imshow"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3763,"status":"ok","timestamp":1731092546327,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"},"user_tz":300},"id":"dl0epIyTgs_3","outputId":"d717cd54-4e3b-4afb-d100-f4a575b24d99"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:easyocr.easyocr:Neither CUDA nor MPS are available - defaulting to CPU. Note: This module is much faster with a GPU.\n"]}],"source":["# Initialize the ocr reader to identify english text\n","reader = easyocr.Reader(['en'], gpu=True)"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":190,"status":"ok","timestamp":1731097730037,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"},"user_tz":300},"id":"sJkMKohaV8yb","outputId":"53a36a6b-1c84-411e-b37b-13ca2ca33415"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of frames: 1309. Frames per second: 59.934831024431105\n"]}],"source":["# Open the video file\n","#cam = cv2.VideoCapture(\"SANMH13-SANMH14_Street G_221025_080504.mp4\")\n","cam = cv2.VideoCapture(\"SANMH13-SANMH14_Street G_221025_080504 - Copy - Trim.mp4\")\n","\n","# The total number of frames in the video\n","num_frames = int(cam.get(cv2.CAP_PROP_FRAME_COUNT))\n","\n","# The video's frames-per-second value\n","fps = cam.get(cv2.CAP_PROP_FPS)\n","print(f\"Total number of frames: {num_frames}. Frames per second: {fps}\")"]},{"cell_type":"code","source":["class Preprocess_easyocr:\n","    def __init__(self, video_name, time_interval):\n","        self.video_name = video_name\n","        self.time_interval = time_interval\n","        self.reader = easyocr.Reader(['en'], gpu=True)\n","        self.cam = cv2.VideoCapture(video_name)\n","\n","        # Video properties\n","        self.num_frames = int(self.cam.get(cv2.CAP_PROP_FRAME_COUNT))\n","        self.fps = self.cam.get(cv2.CAP_PROP_FPS)\n","        self.frame_interval = int(self.fps * self.time_interval)\n","        print(f\"Total number of frames: {self.num_frames}. Frames per second: {self.fps}\")\n","        print(f\"Observing frames in intervals of {self.frame_interval}\")\n","\n","        # OCR results dataframe\n","        self.all_results = pd.DataFrame(columns=['Bounding Box', 'Character', 'Confidence'])\n","\n","    def preprocess_frame(self, frame):\n","        # Observe only the bottom quarter of the frame containing the distance metric\n","        frame = frame[int(len(frame)*3/4):]\n","        # Convert to grayscale for improved OCR accuracy\n","        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","        # Invert colours\n","        #frame = cv2.bitwise_not(frame)\n","        # Resize the frame for improved OCR accuracy\n","        frame = cv2.resize(frame, (len(frame[0])*4, len(frame)*2))\n","        return frame\n","\n","    def extract_text_from_frame(self, frame):\n","        # Use OCR to extract text from a frame\n","        return self.reader.readtext(frame, allowlist='0123456789.:m')\n","\n","    def find_bounding_box(self, results, frame_idx):\n","        # Find the bounding box for a list of extracted results\n","        x_len = 0\n","        bounds = None\n","        for (bbox, text, _) in results:\n","            # Look for the 'm' in the text, indicating distance measurement\n","            if text != \"\":\n","                if text[-1] == 'm' and any(ch in text for ch in [\"00\", \".0\", \"0.\"]):\n","                    x_len = bbox[1][0] - bbox[0][0]\n","                    bounds = [bbox[0][0] - x_len, bbox[1][0], bbox[0][1], bbox[2][1]]\n","                    return bounds, frame_idx\n","        return None, frame_idx\n","\n","    def process_frame_for_bounding_box(self, frame_idx):\n","        # Process frames to find bounding box of the measurement region\n","        ret, frame = self.cam.read()\n","        if not ret:\n","            print(f\"Error reading frame at index {frame_idx}, skipping.\")\n","            return None, frame_idx\n","\n","        if frame_idx % self.frame_interval == 0:\n","            frame = self.preprocess_frame(frame)\n","            results = self.extract_text_from_frame(frame)\n","            frame_df = pd.DataFrame(results, columns=['Bounding Box', 'Character', 'Confidence'])\n","            self.all_results = pd.concat([self.all_results, frame_df], ignore_index=True)\n","\n","            # Process bounding box\n","            bounds, frame_idx = self.find_bounding_box(results, frame_idx)\n","            if bounds:\n","                print(f\"Found bounding box: {bounds}\")\n","            return bounds, frame_idx\n","        return None, frame_idx\n","\n","    def update_measurement_data(self, arr, result, num, dot_loc):\n","        # Update the measurement data array and track the decimal point locations\n","        if len(result) == 0:\n","            return arr, dot_loc\n","        arr.append([result[0][1], num])\n","        if \".\" in result[0][1]:\n","            dot_loc[result[0][1].index(\".\")] += 1\n","        return arr, dot_loc\n","\n","    def plot_results(self, frame_nums, numeric_readings):\n","        # Plot the predicted distance readings over the frame numbers\n","        plt.plot(frame_nums, numeric_readings)\n","        plt.xlabel(\"Frame Number\")\n","        plt.ylabel(\"Distance Reading (m)\")\n","        plt.title(self.video_name)\n","        plt.show()\n","\n","    def process_video(self):\n","        # Process the video, extract the text, and plot the results\n","        bounds = None\n","        num = 0\n","        arr = []\n","        dot_loc = [0] * 7  # Tracks occurrences of decimal points at each position\n","        frame_nums = []\n","        numeric_readings = []\n","\n","        # First loop to find the bounding box (where measurements are)\n","        for i in tqdm(range(self.num_frames)):\n","            bounds, num = self.process_frame_for_bounding_box(i)\n","            if bounds:\n","                break  # Exit early once we find the first bounding box\n","        if bounds is None:\n","            print(\"No valid bounding box found.\")\n","            return\n","\n","        # Process frames for measurement data\n","        while True:\n","            num += 1\n","            ret, frame = self.cam.read()\n","\n","            if not ret or num == 15000:  # Stop after a set number of frames\n","                break\n","            if num % 10 != 0:  # Skip frames unless it's every 10th frame\n","                continue\n","\n","            frame = self.preprocess_frame(frame)\n","            frame = frame[bounds[2]:bounds[3], bounds[0]:bounds[1]]  # Crop to bounding box\n","\n","            # Perform OCR\n","            result = self.extract_text_from_frame(frame)\n","            arr, dot_loc = self.update_measurement_data(arr, result, num, dot_loc)\n","\n","            if num % 100 == 0:\n","                print(f\"Processing frame {num}\")\n","\n","        # Determine the most likely position of the decimal point\n","        best_dot_pos = dot_loc.index(max(dot_loc))\n","        for text, frame_num in arr:\n","            if 'm' in text:\n","                text = text[:-1]  # Remove 'm'\n","\n","            string = text.replace(\".\", \"\")\n","            string = text.replace(\":\", \"\")\n","            if len(string) > best_dot_pos:\n","                string = string[:best_dot_pos] + \".\" + string[best_dot_pos:]\n","\n","            if string:\n","                numeric_readings.append(float(string))\n","                frame_nums.append(frame_num)\n","\n","        self.plot_results(frame_nums, numeric_readings)\n","\n","        # Release resources\n","        self.cam.release()\n","        cv2.destroyAllWindows()\n","\n","        return self.all_results"],"metadata":{"id":"CiDQNvw3RrQc","executionInfo":{"status":"ok","timestamp":1731097713715,"user_tz":300,"elapsed":194,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["# Example usage\n","video_name = \"SANMH13-SANMH14_Street G_221025_080504 - Copy - Trim.mp4\"  # Path to your video file\n","time_interval = 1  # Time interval in seconds for frame sampling\n","\n","# Create an instance of the processor\n","processor = Preprocess_easyocr(video_name, time_interval)\n","\n","# Process the video and get the OCR results\n","all_results = processor.process_video()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":191,"referenced_widgets":["6b8fdc1185904a99a0b2ba5fec601cb2","d1af59bae1c544d0af620b18ad8d354a","5f97019bb9824d97a96b5d8ac70d3139","294d3eeefc0d44e3b25c69eac825611f","f14eb36498cf44679b574d29752ef3f7","be556b17321046c49b28b81a6fb3d9c2","49e130c1594544f699c55b9ef1197e7b","e840a1c84eb24ec2bf8d858193202eac","42b788fe1974459e934f4cf52ba4147e","6eb0673d67954a1ab9e39b67ded8104c","91ff5d0289f04b36955a5ab7cfbd3442"]},"id":"Lc22dBWFT92a","executionInfo":{"status":"ok","timestamp":1731097612346,"user_tz":300,"elapsed":225976,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"}},"outputId":"47062af1-422f-48ef-bd08-93079d9d11d7"},"execution_count":38,"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["WARNING:easyocr.easyocr:Neither CUDA nor MPS are available - defaulting to CPU. Note: This module is much faster with a GPU.\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Total number of frames: 1309. Frames per second: 59.934831024431105\n","Observing frames in intervals of 59\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"6b8fdc1185904a99a0b2ba5fec601cb2","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/1309 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["<ipython-input-37-d782d359bc8d>:57: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n","  self.all_results = pd.concat([self.all_results, frame_df], ignore_index=True)\n"]},{"output_type":"stream","name":"stdout","text":["here\n","No valid bounding box found.\n"]}]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":429,"status":"ok","timestamp":1731093226164,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"},"user_tz":300},"id":"31LTXoxaFggl"},"outputs":[],"source":["# Function to iterate through a video and perform OCR\n","def process_video(video_name, time_interval):\n","\n","    # Open the video file\n","    cam = cv2.VideoCapture(video_name)\n","\n","    # The total number of frames in the video\n","    num_frames = int(cam.get(cv2.CAP_PROP_FRAME_COUNT))\n","\n","    # The video's frames-per-second value\n","    fps = cam.get(cv2.CAP_PROP_FPS)\n","    frame_interval = int(fps * time_interval)  # Convert time_interva into frame interval\n","    print(f\"Total number of frames: {num_frames}. Frames per second: {fps}\")\n","    print(f\"Observing frames in intervals of {frame_interval}\")\n","\n","    all_results = pd.DataFrame(columns=['Bounding Box', 'Character', 'Confidence'])\n","\n","    for i in tqdm(range(num_frames)):\n","        ret, frame = cam.read()\n","\n","        if not ret:\n","            print(f\"Error reading frame at index {i}, skipping.\")\n","            continue\n","\n","        if i % frame_interval == 0:\n","            frame = frame[int(len(frame)*3/4):] # Observe only the bottom quarter of the frame\n","            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # Convert to grayscale\n","            #frame = cv2.bitwise_not(frame) # Invert colours\n","            frame = cv2.resize(frame, (len(frame[0])*4, len(frame)*2)) # Resize the frame\n","\n","            # Perform OCR on the frame\n","            results = reader.readtext(frame, allowlist='0123456789.:m')\n","            frame_df = pd.DataFrame(results, columns=['Bounding Box', 'Character', 'Confidence'])\n","            all_results = pd.concat([all_results, frame_df], ignore_index=True)\n","\n","            # Draw bounding boxes and text\n","            for result in results:\n","                (bbox, text, _) = result\n","                cv2.polylines(frame, [np.array(bbox)], isClosed=True, color=(0, 0, 255), thickness=2)\n","                text_position = (int(bbox[0][0]), int(bbox[0][1] - 10))\n","                cv2.putText(frame, text, text_position, cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)\n","\n","            cv2_imshow(frame)\n","\n","            # Process and normalize the results\n","            for j in range(1, len(results)):\n","                (bbox, text, prob)  = results[j] # Iterate through the results\n","\n","                # Align consecutive results that end with 'm'\n","                # Assume that the 'm' should appear consistently in a sequence of results\n","                if text[-1] == 'm' and result[j-1][1][-1] != 'm': # Text ends in m but the previous text does not\n","                    results[j-1] = (results[j-1][0], results[j-1][1] + \"m\", results[j-1][2]) # Adjust previous text\n","\n","                # Check if the text ends in m and contains the specified patterns\n","                if text[-1] == 'm' and any(ch in text for ch in [\"00\", \".0\", \"0.\"]):\n","                    # Calculate the width of the bounding box\n","                    x_len = bbox[1][0] - bbox[0][0]\n","                    # Expand the bounding box\n","                    bounds = [bbox[0][0] - x_len, bbox[1][0], bbox[0][1], bbox[2][1]]\n","                    num = i  # Store the current frame index (assuming 'i' is the frame number)\n","                    break  # Stop processing after finding the first valid result\n","            # If a valid bounding box adjustment was made, we can proceed\n","            if x_len != 0:\n","                # Here you can continue processing based on the adjusted bounding box\n","                print(f\"Adjusted bounds: {bounds}, Frame number: {num}\")\n","\n","        arr = []\n","        dot_loc = [0,0,0,0,0,0,0]\n","        while True:\n","            num += 1\n","            ret, frame = cam.read()\n","\n","            if(not ret or i == 15000):\n","                break\n","            if(num % 10 != 0):\n","                continue\n","\n","            frame = frame[int(len(frame)*3/4):]\n","            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","            frame = cv2.resize(frame, (len(frame[0])*4, len(frame)*4))\n","            frame = frame[bounds[2]:bounds[3], bounds[0]:bounds[1]]\n","            result = reader.readtext(frame, allowlist='0123456789.m')\n","            if(len(result) == 0):\n","                continue\n","            arr.append([result[0][1], num])\n","            if(\".\" in result[0][1]):\n","                dot_loc[result[0][1].index(\".\")] += 1\n","\n","            if(num % 100 == 0):\n","                print(num)\n","\n","        best_dot_pos = dot_loc.index(max(dot_loc))\n","        numeric_readings = []\n","        frame_nums = []\n","        for i in range(len(arr)):\n","            if('m' in arr[i][0][:-1]):\n","                continue\n","            elif('m' in arr[i][0]):\n","                arr[i][0] = arr[i][0][:-1]\n","\n","            string = arr[i][0].replace(\".\", \"\")\n","            if(len(string) > best_dot_pos):\n","                string = string[:best_dot_pos] + \".\" + string[best_dot_pos:]\n","\n","            if(string == \"\"):\n","                continue\n","\n","            numeric_readings.append(float(string))\n","            frame_nums.append(arr[i][1])\n","\n","        plt.plot(frame_nums, numeric_readings)\n","        plt.xlabel(\"Frame Number\")\n","        plt.ylabel(\"Distance Reading (m)\")\n","        plt.title(\"Colgan SAN-13 - SAN-14 OCR Readings\")\n","        plt.show()\n","        check = 0\n","\n","\n","    # Release the video capture object and close windows\n","    cam.release()\n","    cv2.destroyAllWindows()\n","    return(all_results)"]},{"cell_type":"code","source":["for i in range(num_frames):\n","\n","\n","    ret, frame = cam.read()\n","\n","    frame = frame[int(len(frame)*3/4):]\n","    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","    frame = cv2.resize(frame, (len(frame[0])*4, len(frame)*4))\n","\n","\n","    result = reader.readtext(frame, allowlist='0123456789.:m')\n","\n","    j = 0\n","    for (bbox, text, prob) in result:\n","        if(text == 'm' and j != 0):\n","            result[j-1] = (result[j-1][0], result[j-1][1] + \"m\", result[j-1][2])\n","        j += 1\n","    x_len = 0\n","    for (bbox, text, prob) in result:\n","        if(text[-1] == 'm' and any(ch in text for ch in [\"00\", \".0\", \"0.\"])):\n","            x_len = bbox[1][0] - bbox[0][0]\n","            bounds = [bbox[0][0] - x_len, bbox[1][0], bbox[0][1], bbox[2][1]]\n","            num = i\n","            break\n","    if(x_len != 0):\n","        break\n","\n","arr = []\n","dot_loc = [0,0,0,0,0,0,0]\n","while True:\n","    num += 1\n","    ret, frame = cam.read()\n","\n","    if(not ret or i == 15000):\n","        break\n","    if(num % 10 != 0):\n","        continue\n","    # if(num % 1000 == 0):\n","    #     break\n","\n","    frame = frame[int(len(frame)*3/4):]\n","    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n","    frame = cv2.resize(frame, (len(frame[0])*4, len(frame)*4))\n","    frame = frame[bounds[2]:bounds[3], bounds[0]:bounds[1]]\n","    result = reader.readtext(frame, allowlist='0123456789.m')\n","    if(len(result) == 0):\n","        continue\n","    arr.append([result[0][1], num])\n","    if(\".\" in result[0][1]):\n","        dot_loc[result[0][1].index(\".\")] += 1\n","\n","    if(num % 100 == 0):\n","        print(num)\n","\n","best_dot_pos = dot_loc.index(max(dot_loc))\n","numeric_readings = []\n","frame_nums = []\n","for i in range(len(arr)):\n","    if('m' in arr[i][0][:-1]):\n","        continue\n","    elif('m' in arr[i][0]):\n","        arr[i][0] = arr[i][0][:-1]\n","\n","    string = arr[i][0].replace(\".\", \"\")\n","    if(len(string) > best_dot_pos):\n","        string = string[:best_dot_pos] + \".\" + string[best_dot_pos:]\n","\n","    if(string == \"\"):\n","        continue\n","\n","    numeric_readings.append(float(string))\n","    frame_nums.append(arr[i][1])\n","\n","plt.plot(frame_nums, numeric_readings)\n","plt.xlabel(\"Frame Number\")\n","plt.ylabel(\"Distance Reading (m)\")\n","plt.title(\"Colgan SAN-13 - SAN-14 OCR Readings\")\n","plt.show()\n","check = 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":280},"id":"jaz9ybQNdpru","executionInfo":{"status":"ok","timestamp":1731097845789,"user_tz":300,"elapsed":55283,"user":{"displayName":"Daniel Li","userId":"08969672304239366938"}},"outputId":"3dc6cc35-a7e0-4c9a-d3ce-e1b260aba200"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["100\n","200\n","300\n","400\n","500\n","600\n","700\n","800\n","900\n","1000\n","1100\n","1200\n","1300\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN0KXh1MahwilGBSOrpyPGb"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"6b8fdc1185904a99a0b2ba5fec601cb2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d1af59bae1c544d0af620b18ad8d354a","IPY_MODEL_5f97019bb9824d97a96b5d8ac70d3139","IPY_MODEL_294d3eeefc0d44e3b25c69eac825611f"],"layout":"IPY_MODEL_f14eb36498cf44679b574d29752ef3f7"}},"d1af59bae1c544d0af620b18ad8d354a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_be556b17321046c49b28b81a6fb3d9c2","placeholder":"​","style":"IPY_MODEL_49e130c1594544f699c55b9ef1197e7b","value":"100%"}},"5f97019bb9824d97a96b5d8ac70d3139":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e840a1c84eb24ec2bf8d858193202eac","max":1309,"min":0,"orientation":"horizontal","style":"IPY_MODEL_42b788fe1974459e934f4cf52ba4147e","value":1309}},"294d3eeefc0d44e3b25c69eac825611f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6eb0673d67954a1ab9e39b67ded8104c","placeholder":"​","style":"IPY_MODEL_91ff5d0289f04b36955a5ab7cfbd3442","value":" 1309/1309 [04:37&lt;00:00,  6.04it/s]"}},"f14eb36498cf44679b574d29752ef3f7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be556b17321046c49b28b81a6fb3d9c2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"49e130c1594544f699c55b9ef1197e7b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e840a1c84eb24ec2bf8d858193202eac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"42b788fe1974459e934f4cf52ba4147e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6eb0673d67954a1ab9e39b67ded8104c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"91ff5d0289f04b36955a5ab7cfbd3442":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}